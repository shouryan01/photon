name: Build and Release Photon
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      # 4. Build the executable with PyInstaller
      - name: Build with PyInstaller
        # This step uses conditional logic based on the operating system
        # to apply appropriate PyInstaller flags.
        run: |
          # The --noconfirm flag prevents PyInstaller from asking for confirmation.
          # The --onefile flag bundles everything into a single executable.
          # The --name flag sets the name of the output executable.
          # The --windowed flag (for GUI apps on Windows/macOS) prevents a console window from appearing.

          # GitHub Actions sets RUNNER_OS environment variable automatically.
          # The shell used will be the default for the runner OS (pwsh for Windows, bash for Linux/macOS).
          # The conditional logic within the script adapts to the shell's syntax.

          # If the current runner is Windows (PowerShell syntax)
          if ($env:RUNNER_OS -eq "Windows") {
            pyinstaller --noconfirm --onefile --windowed --name "photon" main.py
          }
          # If the current runner is macOS (Bash syntax)
          elif [ "$RUNNER_OS" == "macOS" ]; then
            pyinstaller --noconfirm --onefile --windowed --name "photon" main.py
          }
          # Otherwise (Linux - Bash syntax)
          else {
            pyinstaller --noconfirm --onefile --name "photon" main.py
          }
        # REMOVED: shell: ${{ matrix.os == 'windows-latest' && 'pwsh' || 'bash' }}
        # The default shell for each runner (pwsh on Windows, bash on others)
        # will automatically be used, which correctly executes the if/elif/else logic.

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/*

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required to create a release and upload assets

    steps:
      - name: Generate timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # The directory where all artifacts will be downloaded

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ env.TIMESTAMP }}
          name: "Release ${{ env.TIMESTAMP }}"
          body: "Automated release of executables."
          prerelease: false
          files: |
            artifacts/executable-windows-latest/*
            artifacts/executable-macos-latest/*
            artifacts/executable-ubuntu-latest/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
